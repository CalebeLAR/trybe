// üöÄ Altere as vari√°veis para respeitarem o escopo em que foram declaradas.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.

const testingScope = escopo => {
    if (escopo === true) {
      let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
      console.log(`${ifScope} √≥timo, fui utilizada no escopo !`);
    } else {
      let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
      console.log(elseScope);
    }
  }

  testingScope(true);

// const testingScope = escopo => {
//     (escopo === true)? console.log(`N√£o devo ser utilizada fora do meu escopo (if) √≥timo, fui utilizada no escopo !`): console.log("N√£o devo ser utilizada fora meu escopo (else)");
// }
// testingScope(true)


// üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.

// Seu c√≥digo aqui.
const ordena = array => array.sort((a, b) => a - b)
const oddsAndEvens = [13, 3, 4, 10, 7, 2];
console.log(`Os n√∫meros ${ordena(oddsAndEvens)} se encontram ordenados de forma crescente!`);

// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;
// Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
